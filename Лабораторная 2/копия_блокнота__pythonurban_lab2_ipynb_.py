# -*- coding: utf-8 -*-
"""Копия блокнота "PythonUrban_lab2.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oGtQ9GA8EQfdILn7jdJf-LU4lg8_wGvp

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install geopandas 
!pip install mapclassify  
!pip install osmnx

# TODO собрать импорты всех модулей в одном месте
import json
import requests
import geopandas as gpd
import osmnx as ox

TILES = "CartoDB positron"  # Название подложки для карт

TERRITORY_NAME = 'Адмиралтейский район, Санкт-Петербург'  # название территории для которой будут строиться слои

KGIOP_FILE_URL = 'https://raw.githubusercontent.com/DariaNSol/PythonUrbanITMO/DariaNSol-patch-2/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson'
STREETS_FILE_URL = 'https://raw.githubusercontent.com/DariaNSol/PythonUrbanITMO/a7acc37e3c24537ceb0386c7efcc1e0b5dc8b54f/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson'

"""## Территория

### Загрузка территории из OSM (Extract)
"""

district = ox.geocode_to_gdf(TERRITORY_NAME)

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

streets = gpd.read_file(STREETS_FILE_URL, mask=district)

"""### Обработка данных с улицами (Transform)"""

streets = streets.dissolve(by="name")

"""### Сохранение слоя с улицами (Load)"""

streets.head() # Смотрим на название столбцов

streets.rename(columns={"name": "Название"}, inplace=True)

streets.to_crs(4326).to_file('streets.geojson', driver='GeoJSON')

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

kgiop = gpd.read_file(KGIOP_FILE_URL, mask=district)

"""### Обработка объектов культурного наследия (Transform)"""

kgiop['lon'] = kgiop.centroid.x  
kgiop['lat'] = kgiop.centroid.y

"""### Сохранение слоя с объектами культурного наследия (Load)"""

kgiop.head() # Смотрим на название столбцов

rename_col = {
    'ensemble_name': 'Название ансамбля',
    'object_name': 'Название объекта',
    'occurrence_time': 'Время возникновения',
    'object_location': 'Месторасположения',
    'historical_category': 'Историческая категория',
    'normative_act': 'Нормативный акт',
    'object_type': 'Тип объекта',
    'lon': 'Долгота',
    'lat': 'Широта'
}
kgiop.rename(columns=rename_col, inplace=True)

kgiop.head() # Проверяем название столбцов

# TODO сохранить слой в географической проекции в формате GeoJSON
kgiop.to_crs(4326).to_file('kgiop.geojson', driver='GeoJSON')